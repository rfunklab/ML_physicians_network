#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 19 12:30:20 2022

@author: fpichard
"""

#%% Modules
import sys
import getopt
import json
import os.path as op
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, KFold

#IN-HOUSE IMPORTS
sys.path.append('./Code/modules/')
import cv_prep_vars


##
#%%   COLLECT INPUT
##

year              = '' #2011
# Number of folds to use
k                 = 5
# Percent of sample to use for testing
test_size_percent = 0.33
# Seed to use or generate
seed_opt          = False
original_seed     = 52454


#%% Collect input
# Help message
def help():
    print("""Generate and store indices for KFolds to speed up cross validation
          
-y, --year         YYYY format for available years
-k, --kfolds       Number of folds. Used to find the json file that should have been generated by generate_kfolds_indices
-t, --test_prc     Percent of data used for testing. Used to find the json file that should have been generated by generate_kfolds_indices
-s, --seed         Used to provide a seed or generate a seed (if True). Otherwise, the stored seed will be used (52454). Integer or bool.
-h, --help         Print this message and exit.
""")

required_opts = [('-y', '--year')]
options, remainder = getopt.getopt(sys.argv[1:], "y:k:t:s:h", ["year=","kfolds=","test_prc=", "seed=", "help="])

for opt, arg in options:
    # Check required opts
    if len(required_opts) != 0: #This means that they have all ben matched
        result = [opt in l for l in required_opts]
        
        if True in result: #A requred opt was found
            index_opt = result.index(True)
            _ = required_opts.pop(index_opt)
    
    if opt in ('-y', '--year'):
        year = str(arg)
    elif opt in ('-k', '--kfolds'):
        k = int(arg)
    elif opt in ('-t', '--test_percent'):
        test_size_percent = float(arg)
    elif opt in ('-s', '--seed'):
        if arg.isnumeric():
            seed_opt = int(arg)
        elif arg.lower() in ['t', 'true', 'f', 'false']:
            seed_opt = bool(arg)
    elif opt in ('-h', '--help'):
        help()
        sys.exit()

# Exit if there are missing required opts
if len(required_opts) != 0:
    help()
    sys.exit("The following options are missing: " + str(required_opts))


#%% Load PD data
data_PDs_filename = op.join(cv_prep_vars.DATA_PATH, "proj-PI_year-" + year + "_region-great_lakes_desc-PD_as_str_h1.csv")
data_PDs          = pd.read_csv(data_PDs_filename)

# change nas to '' to help with the conversion
data_PDs.fillna('', inplace = True)


#%% SET SEED
if type(seed_opt) == int:
    seed_generated = seed_opt
elif not seed_opt:
    seed_generated = original_seed
else:
    seed_generated = np.random.randint(2**32)


#%% CV Prep
# train/test split: hsa ids
hsa_train, hsa_test     = train_test_split(data_PDs.hsa, test_size = test_size_percent)
train_index, test_index = hsa_train.index.tolist(), hsa_test.index.tolist()

# cv split: k-fold
kf       = KFold(n_splits=k, shuffle=True, random_state=seed_generated)
kf_index = list(kf.split(train_index))

kf_train_folds      = {fold:element.tolist() for fold, element in enumerate([element[0] for element in kf_index])}
kf_validation_folds = {fold:element.tolist() for fold, element in enumerate([element[1] for element in kf_index])}


#%% Save CV Prep Data
# Prep to save
cv_data = {
    'train_index'     : train_index,
    'test_index'      : test_index,
    'train_folds'     : kf_train_folds,
    'validation_folds': kf_validation_folds
    }

# Save
savename_template = "proj-PI_year-{year}_region-great_lakes_k-{k}_" + \
                    "test-{test_prc}_seed-{seed}_desc-cv_prep_data.json"
savename_info     = {
    "year"     : year,
    "k"        : k,
    "test_prc" :test_size_percent,
    "seed"     : seed_generated
    }

save_filename = op.join(cv_prep_vars.DATA_PATH, savename_template.format_map(savename_info))

with open(save_filename, 'w') as file_object:
    json.dump(cv_data, file_object)